// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jxsl13/plesgo/models"
)

// PostAuthKeysReader is a Reader for the PostAuthKeys structure.
type PostAuthKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuthKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostAuthKeysCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAuthKeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostAuthKeysUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostAuthKeysCreated creates a PostAuthKeysCreated with default headers values
func NewPostAuthKeysCreated() *PostAuthKeysCreated {
	return &PostAuthKeysCreated{}
}

/* PostAuthKeysCreated describes a response with status code 201, with default header values.

Secret key was successfully created
*/
type PostAuthKeysCreated struct {
	Payload *models.SecretKeyResponse
}

func (o *PostAuthKeysCreated) Error() string {
	return fmt.Sprintf("[POST /auth/keys][%d] postAuthKeysCreated  %+v", 201, o.Payload)
}
func (o *PostAuthKeysCreated) GetPayload() *models.SecretKeyResponse {
	return o.Payload
}

func (o *PostAuthKeysCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SecretKeyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthKeysBadRequest creates a PostAuthKeysBadRequest with default headers values
func NewPostAuthKeysBadRequest() *PostAuthKeysBadRequest {
	return &PostAuthKeysBadRequest{}
}

/* PostAuthKeysBadRequest describes a response with status code 400, with default header values.

Invalid request data
*/
type PostAuthKeysBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PostAuthKeysBadRequest) Error() string {
	return fmt.Sprintf("[POST /auth/keys][%d] postAuthKeysBadRequest  %+v", 400, o.Payload)
}
func (o *PostAuthKeysBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostAuthKeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthKeysUnauthorized creates a PostAuthKeysUnauthorized with default headers values
func NewPostAuthKeysUnauthorized() *PostAuthKeysUnauthorized {
	return &PostAuthKeysUnauthorized{}
}

/* PostAuthKeysUnauthorized describes a response with status code 401, with default header values.

Incorrect login
*/
type PostAuthKeysUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *PostAuthKeysUnauthorized) Error() string {
	return fmt.Sprintf("[POST /auth/keys][%d] postAuthKeysUnauthorized  %+v", 401, o.Payload)
}
func (o *PostAuthKeysUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostAuthKeysUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
