// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new clients API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clients API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteClientsID(params *DeleteClientsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClientsIDOK, error)

	GetClients(params *GetClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientsOK, error)

	GetClientsID(params *GetClientsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientsIDOK, error)

	GetClientsIDDomains(params *GetClientsIDDomainsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientsIDDomainsOK, error)

	GetClientsIDStatistics(params *GetClientsIDStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientsIDStatisticsOK, error)

	PostClients(params *PostClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostClientsCreated, error)

	PutClientsID(params *PutClientsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutClientsIDOK, error)

	PutClientsIDActivate(params *PutClientsIDActivateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutClientsIDActivateOK, error)

	PutClientsIDSuspend(params *PutClientsIDSuspendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutClientsIDSuspendOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteClientsID deletes client account
*/
func (a *Client) DeleteClientsID(params *DeleteClientsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClientsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClientsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteClientsID",
		Method:             "DELETE",
		PathPattern:        "/clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClientsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClientsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteClientsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClients lists all clients
*/
func (a *Client) GetClients(params *GetClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClients",
		Method:             "GET",
		PathPattern:        "/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClientsID clients details
*/
func (a *Client) GetClientsID(params *GetClientsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClientsID",
		Method:             "GET",
		PathPattern:        "/clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClientsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClientsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClientsIDDomains lists of client domains
*/
func (a *Client) GetClientsIDDomains(params *GetClientsIDDomainsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientsIDDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientsIDDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClientsIDDomains",
		Method:             "GET",
		PathPattern:        "/clients/{id}/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClientsIDDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientsIDDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClientsIDDomains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClientsIDStatistics gets client stats
*/
func (a *Client) GetClientsIDStatistics(params *GetClientsIDStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientsIDStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientsIDStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClientsIDStatistics",
		Method:             "GET",
		PathPattern:        "/clients/{id}/statistics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClientsIDStatisticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientsIDStatisticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClientsIDStatistics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostClients creates a new client account
*/
func (a *Client) PostClients(params *PostClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostClientsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostClients",
		Method:             "POST",
		PathPattern:        "/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostClientsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutClientsID updates client account
*/
func (a *Client) PutClientsID(params *PutClientsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutClientsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClientsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutClientsID",
		Method:             "PUT",
		PathPattern:        "/clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutClientsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClientsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutClientsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutClientsIDActivate activates client
*/
func (a *Client) PutClientsIDActivate(params *PutClientsIDActivateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutClientsIDActivateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClientsIDActivateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutClientsIDActivate",
		Method:             "PUT",
		PathPattern:        "/clients/{id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutClientsIDActivateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClientsIDActivateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutClientsIDActivate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutClientsIDSuspend suspends client
*/
func (a *Client) PutClientsIDSuspend(params *PutClientsIDSuspendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutClientsIDSuspendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClientsIDSuspendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutClientsIDSuspend",
		Method:             "PUT",
		PathPattern:        "/clients/{id}/suspend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutClientsIDSuspendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClientsIDSuspendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutClientsIDSuspend: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
