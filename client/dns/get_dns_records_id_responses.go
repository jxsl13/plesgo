// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jxsl13/plesgo/models"
)

// GetDNSRecordsIDReader is a Reader for the GetDNSRecordsID structure.
type GetDNSRecordsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDNSRecordsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDNSRecordsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDNSRecordsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDNSRecordsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDNSRecordsIDOK creates a GetDNSRecordsIDOK with default headers values
func NewGetDNSRecordsIDOK() *GetDNSRecordsIDOK {
	return &GetDNSRecordsIDOK{}
}

/* GetDNSRecordsIDOK describes a response with status code 200, with default header values.

OK
*/
type GetDNSRecordsIDOK struct {
	Payload *models.DNSRecord
}

func (o *GetDNSRecordsIDOK) Error() string {
	return fmt.Sprintf("[GET /dns/records/{id}][%d] getDnsRecordsIdOK  %+v", 200, o.Payload)
}
func (o *GetDNSRecordsIDOK) GetPayload() *models.DNSRecord {
	return o.Payload
}

func (o *GetDNSRecordsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSRecord)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDNSRecordsIDBadRequest creates a GetDNSRecordsIDBadRequest with default headers values
func NewGetDNSRecordsIDBadRequest() *GetDNSRecordsIDBadRequest {
	return &GetDNSRecordsIDBadRequest{}
}

/* GetDNSRecordsIDBadRequest describes a response with status code 400, with default header values.

Invalid request data
*/
type GetDNSRecordsIDBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetDNSRecordsIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /dns/records/{id}][%d] getDnsRecordsIdBadRequest  %+v", 400, o.Payload)
}
func (o *GetDNSRecordsIDBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetDNSRecordsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDNSRecordsIDNotFound creates a GetDNSRecordsIDNotFound with default headers values
func NewGetDNSRecordsIDNotFound() *GetDNSRecordsIDNotFound {
	return &GetDNSRecordsIDNotFound{}
}

/* GetDNSRecordsIDNotFound describes a response with status code 404, with default header values.

DNS record is not found
*/
type GetDNSRecordsIDNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetDNSRecordsIDNotFound) Error() string {
	return fmt.Sprintf("[GET /dns/records/{id}][%d] getDnsRecordsIdNotFound  %+v", 404, o.Payload)
}
func (o *GetDNSRecordsIDNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetDNSRecordsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
