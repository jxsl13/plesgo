// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jxsl13/plesgo/models"
)

// PutDNSRecordsIDReader is a Reader for the PutDNSRecordsID structure.
type PutDNSRecordsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDNSRecordsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDNSRecordsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutDNSRecordsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutDNSRecordsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutDNSRecordsIDOK creates a PutDNSRecordsIDOK with default headers values
func NewPutDNSRecordsIDOK() *PutDNSRecordsIDOK {
	return &PutDNSRecordsIDOK{}
}

/* PutDNSRecordsIDOK describes a response with status code 200, with default header values.

OK
*/
type PutDNSRecordsIDOK struct {
	Payload *models.StatusResponse
}

func (o *PutDNSRecordsIDOK) Error() string {
	return fmt.Sprintf("[PUT /dns/records/{id}][%d] putDnsRecordsIdOK  %+v", 200, o.Payload)
}
func (o *PutDNSRecordsIDOK) GetPayload() *models.StatusResponse {
	return o.Payload
}

func (o *PutDNSRecordsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDNSRecordsIDBadRequest creates a PutDNSRecordsIDBadRequest with default headers values
func NewPutDNSRecordsIDBadRequest() *PutDNSRecordsIDBadRequest {
	return &PutDNSRecordsIDBadRequest{}
}

/* PutDNSRecordsIDBadRequest describes a response with status code 400, with default header values.

Invalid request data
*/
type PutDNSRecordsIDBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PutDNSRecordsIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dns/records/{id}][%d] putDnsRecordsIdBadRequest  %+v", 400, o.Payload)
}
func (o *PutDNSRecordsIDBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutDNSRecordsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDNSRecordsIDNotFound creates a PutDNSRecordsIDNotFound with default headers values
func NewPutDNSRecordsIDNotFound() *PutDNSRecordsIDNotFound {
	return &PutDNSRecordsIDNotFound{}
}

/* PutDNSRecordsIDNotFound describes a response with status code 404, with default header values.

DNS record is not found
*/
type PutDNSRecordsIDNotFound struct {
	Payload *models.ErrorResponse
}

func (o *PutDNSRecordsIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /dns/records/{id}][%d] putDnsRecordsIdNotFound  %+v", 404, o.Payload)
}
func (o *PutDNSRecordsIDNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutDNSRecordsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
