// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jxsl13/plesgo/models"
)

// DeleteDomainsIDReader is a Reader for the DeleteDomainsID structure.
type DeleteDomainsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDomainsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteDomainsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteDomainsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteDomainsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteDomainsIDOK creates a DeleteDomainsIDOK with default headers values
func NewDeleteDomainsIDOK() *DeleteDomainsIDOK {
	return &DeleteDomainsIDOK{}
}

/* DeleteDomainsIDOK describes a response with status code 200, with default header values.

OK
*/
type DeleteDomainsIDOK struct {
	Payload *models.CreatedResponse
}

func (o *DeleteDomainsIDOK) Error() string {
	return fmt.Sprintf("[DELETE /domains/{id}][%d] deleteDomainsIdOK  %+v", 200, o.Payload)
}
func (o *DeleteDomainsIDOK) GetPayload() *models.CreatedResponse {
	return o.Payload
}

func (o *DeleteDomainsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreatedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDomainsIDBadRequest creates a DeleteDomainsIDBadRequest with default headers values
func NewDeleteDomainsIDBadRequest() *DeleteDomainsIDBadRequest {
	return &DeleteDomainsIDBadRequest{}
}

/* DeleteDomainsIDBadRequest describes a response with status code 400, with default header values.

Invalid request data
*/
type DeleteDomainsIDBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *DeleteDomainsIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /domains/{id}][%d] deleteDomainsIdBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteDomainsIDBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteDomainsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDomainsIDNotFound creates a DeleteDomainsIDNotFound with default headers values
func NewDeleteDomainsIDNotFound() *DeleteDomainsIDNotFound {
	return &DeleteDomainsIDNotFound{}
}

/* DeleteDomainsIDNotFound describes a response with status code 404, with default header values.

Domain is not found
*/
type DeleteDomainsIDNotFound struct {
	Payload *models.ErrorResponse
}

func (o *DeleteDomainsIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /domains/{id}][%d] deleteDomainsIdNotFound  %+v", 404, o.Payload)
}
func (o *DeleteDomainsIDNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteDomainsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
