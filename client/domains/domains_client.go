// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new domains API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for domains API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDomainsID(params *DeleteDomainsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDomainsIDOK, error)

	GetDomains(params *GetDomainsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainsOK, error)

	GetDomainsID(params *GetDomainsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainsIDOK, error)

	GetDomainsIDClient(params *GetDomainsIDClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainsIDClientOK, error)

	GetDomainsIDStatus(params *GetDomainsIDStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainsIDStatusOK, error)

	PostDomains(params *PostDomainsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDomainsCreated, error)

	PutDomainsID(params *PutDomainsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDomainsIDOK, error)

	PutDomainsIDStatus(params *PutDomainsIDStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDomainsIDStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteDomainsID deletes a domain
*/
func (a *Client) DeleteDomainsID(params *DeleteDomainsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDomainsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDomainsID",
		Method:             "DELETE",
		PathPattern:        "/domains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDomainsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDomainsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDomainsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDomains lists all domains
*/
func (a *Client) GetDomains(params *GetDomainsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomains",
		Method:             "GET",
		PathPattern:        "/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDomainsID domains details
*/
func (a *Client) GetDomainsID(params *GetDomainsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomainsID",
		Method:             "GET",
		PathPattern:        "/domains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomainsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDomainsIDClient gets domain client
*/
func (a *Client) GetDomainsIDClient(params *GetDomainsIDClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainsIDClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsIDClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomainsIDClient",
		Method:             "GET",
		PathPattern:        "/domains/{id}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainsIDClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainsIDClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomainsIDClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDomainsIDStatus gets domain status
*/
func (a *Client) GetDomainsIDStatus(params *GetDomainsIDStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainsIDStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsIDStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomainsIDStatus",
		Method:             "GET",
		PathPattern:        "/domains/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainsIDStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainsIDStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomainsIDStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDomains creates a new domain
*/
func (a *Client) PostDomains(params *PostDomainsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDomainsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDomains",
		Method:             "POST",
		PathPattern:        "/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDomainsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDomains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDomainsID updates a domain
*/
func (a *Client) PutDomainsID(params *PutDomainsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDomainsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutDomainsID",
		Method:             "PUT",
		PathPattern:        "/domains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDomainsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutDomainsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDomainsIDStatus updates a domain status
*/
func (a *Client) PutDomainsIDStatus(params *PutDomainsIDStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDomainsIDStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainsIDStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutDomainsIDStatus",
		Method:             "PUT",
		PathPattern:        "/domains/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainsIDStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDomainsIDStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutDomainsIDStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
