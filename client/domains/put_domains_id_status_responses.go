// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jxsl13/plesgo/models"
)

// PutDomainsIDStatusReader is a Reader for the PutDomainsIDStatus structure.
type PutDomainsIDStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDomainsIDStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDomainsIDStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutDomainsIDStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutDomainsIDStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutDomainsIDStatusOK creates a PutDomainsIDStatusOK with default headers values
func NewPutDomainsIDStatusOK() *PutDomainsIDStatusOK {
	return &PutDomainsIDStatusOK{}
}

/* PutDomainsIDStatusOK describes a response with status code 200, with default header values.

OK
*/
type PutDomainsIDStatusOK struct {
	Payload *models.DomainStatus
}

func (o *PutDomainsIDStatusOK) Error() string {
	return fmt.Sprintf("[PUT /domains/{id}/status][%d] putDomainsIdStatusOK  %+v", 200, o.Payload)
}
func (o *PutDomainsIDStatusOK) GetPayload() *models.DomainStatus {
	return o.Payload
}

func (o *PutDomainsIDStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DomainStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDomainsIDStatusBadRequest creates a PutDomainsIDStatusBadRequest with default headers values
func NewPutDomainsIDStatusBadRequest() *PutDomainsIDStatusBadRequest {
	return &PutDomainsIDStatusBadRequest{}
}

/* PutDomainsIDStatusBadRequest describes a response with status code 400, with default header values.

Invalid request data
*/
type PutDomainsIDStatusBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PutDomainsIDStatusBadRequest) Error() string {
	return fmt.Sprintf("[PUT /domains/{id}/status][%d] putDomainsIdStatusBadRequest  %+v", 400, o.Payload)
}
func (o *PutDomainsIDStatusBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutDomainsIDStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDomainsIDStatusNotFound creates a PutDomainsIDStatusNotFound with default headers values
func NewPutDomainsIDStatusNotFound() *PutDomainsIDStatusNotFound {
	return &PutDomainsIDStatusNotFound{}
}

/* PutDomainsIDStatusNotFound describes a response with status code 404, with default header values.

Domain is not found
*/
type PutDomainsIDStatusNotFound struct {
	Payload *models.ErrorResponse
}

func (o *PutDomainsIDStatusNotFound) Error() string {
	return fmt.Sprintf("[PUT /domains/{id}/status][%d] putDomainsIdStatusNotFound  %+v", 404, o.Payload)
}
func (o *PutDomainsIDStatusNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutDomainsIDStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
