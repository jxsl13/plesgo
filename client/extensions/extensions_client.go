// Code generated by go-swagger; DO NOT EDIT.

package extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new extensions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for extensions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteExtensionsID(params *DeleteExtensionsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExtensionsIDOK, error)

	GetExtensions(params *GetExtensionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExtensionsOK, error)

	GetExtensionsID(params *GetExtensionsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExtensionsIDOK, error)

	PostExtensions(params *PostExtensionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostExtensionsOK, error)

	PutExtensionsIDDisable(params *PutExtensionsIDDisableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutExtensionsIDDisableOK, error)

	PutExtensionsIDEnable(params *PutExtensionsIDEnableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutExtensionsIDEnableOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteExtensionsID deletes an extension
*/
func (a *Client) DeleteExtensionsID(params *DeleteExtensionsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExtensionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExtensionsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteExtensionsID",
		Method:             "DELETE",
		PathPattern:        "/extensions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExtensionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteExtensionsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteExtensionsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExtensions lists of installed extensions
*/
func (a *Client) GetExtensions(params *GetExtensionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExtensionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExtensionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetExtensions",
		Method:             "GET",
		PathPattern:        "/extensions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExtensionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExtensionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetExtensions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExtensionsID extensions details
*/
func (a *Client) GetExtensionsID(params *GetExtensionsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExtensionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExtensionsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetExtensionsID",
		Method:             "GET",
		PathPattern:        "/extensions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExtensionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExtensionsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetExtensionsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostExtensions installs a new extension
*/
func (a *Client) PostExtensions(params *PostExtensionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostExtensionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostExtensionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostExtensions",
		Method:             "POST",
		PathPattern:        "/extensions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExtensionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostExtensionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostExtensions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutExtensionsIDDisable disables extension
*/
func (a *Client) PutExtensionsIDDisable(params *PutExtensionsIDDisableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutExtensionsIDDisableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutExtensionsIDDisableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutExtensionsIDDisable",
		Method:             "PUT",
		PathPattern:        "/extensions/{id}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExtensionsIDDisableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutExtensionsIDDisableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutExtensionsIDDisable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutExtensionsIDEnable enables extension
*/
func (a *Client) PutExtensionsIDEnable(params *PutExtensionsIDEnableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutExtensionsIDEnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutExtensionsIDEnableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutExtensionsIDEnable",
		Method:             "PUT",
		PathPattern:        "/extensions/{id}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExtensionsIDEnableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutExtensionsIDEnableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutExtensionsIDEnable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
