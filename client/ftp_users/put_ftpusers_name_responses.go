// Code generated by go-swagger; DO NOT EDIT.

package ftp_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jxsl13/plesgo/models"
)

// PutFtpusersNameReader is a Reader for the PutFtpusersName structure.
type PutFtpusersNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutFtpusersNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutFtpusersNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutFtpusersNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutFtpusersNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutFtpusersNameOK creates a PutFtpusersNameOK with default headers values
func NewPutFtpusersNameOK() *PutFtpusersNameOK {
	return &PutFtpusersNameOK{}
}

/* PutFtpusersNameOK describes a response with status code 200, with default header values.

OK
*/
type PutFtpusersNameOK struct {
	Payload *models.StatusResponse
}

func (o *PutFtpusersNameOK) Error() string {
	return fmt.Sprintf("[PUT /ftpusers/{name}][%d] putFtpusersNameOK  %+v", 200, o.Payload)
}
func (o *PutFtpusersNameOK) GetPayload() *models.StatusResponse {
	return o.Payload
}

func (o *PutFtpusersNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFtpusersNameBadRequest creates a PutFtpusersNameBadRequest with default headers values
func NewPutFtpusersNameBadRequest() *PutFtpusersNameBadRequest {
	return &PutFtpusersNameBadRequest{}
}

/* PutFtpusersNameBadRequest describes a response with status code 400, with default header values.

Invalid request data
*/
type PutFtpusersNameBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PutFtpusersNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /ftpusers/{name}][%d] putFtpusersNameBadRequest  %+v", 400, o.Payload)
}
func (o *PutFtpusersNameBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutFtpusersNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFtpusersNameNotFound creates a PutFtpusersNameNotFound with default headers values
func NewPutFtpusersNameNotFound() *PutFtpusersNameNotFound {
	return &PutFtpusersNameNotFound{}
}

/* PutFtpusersNameNotFound describes a response with status code 404, with default header values.

User is not found
*/
type PutFtpusersNameNotFound struct {
	Payload *models.ErrorResponse
}

func (o *PutFtpusersNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /ftpusers/{name}][%d] putFtpusersNameNotFound  %+v", 404, o.Payload)
}
func (o *PutFtpusersNameNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutFtpusersNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
