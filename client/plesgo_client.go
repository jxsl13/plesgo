// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/jxsl13/plesgo/client/authentication"
	"github.com/jxsl13/plesgo/client/cli"
	"github.com/jxsl13/plesgo/client/clients"
	"github.com/jxsl13/plesgo/client/databases"
	"github.com/jxsl13/plesgo/client/dns"
	"github.com/jxsl13/plesgo/client/domains"
	"github.com/jxsl13/plesgo/client/extensions"
	"github.com/jxsl13/plesgo/client/ftp_users"
	serverops "github.com/jxsl13/plesgo/client/server"
)

// Default plesgo HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api/v2"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new plesgo HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Plesgo {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new plesgo HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Plesgo {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new plesgo client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Plesgo {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Plesgo)
	cli.Transport = transport
	cli.Authentication = authentication.New(transport, formats)
	cli.Cli = cli.New(transport, formats)
	cli.Clients = clients.New(transport, formats)
	cli.Databases = databases.New(transport, formats)
	cli.DNS = dns.New(transport, formats)
	cli.Domains = domains.New(transport, formats)
	cli.Extensions = extensions.New(transport, formats)
	cli.FtpUsers = ftp_users.New(transport, formats)
	cli.Server = serverops.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Plesgo is a client for plesgo
type Plesgo struct {
	Authentication authentication.ClientService

	Cli cli.ClientService

	Clients clients.ClientService

	Databases databases.ClientService

	DNS dns.ClientService

	Domains domains.ClientService

	Extensions extensions.ClientService

	FtpUsers ftp_users.ClientService

	Server serverops.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Plesgo) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Authentication.SetTransport(transport)
	c.Cli.SetTransport(transport)
	c.Clients.SetTransport(transport)
	c.Databases.SetTransport(transport)
	c.DNS.SetTransport(transport)
	c.Domains.SetTransport(transport)
	c.Extensions.SetTransport(transport)
	c.FtpUsers.SetTransport(transport)
	c.Server.SetTransport(transport)
}
