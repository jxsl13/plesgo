// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jxsl13/plesgo/models"
)

// PostServerLicenseReader is a Reader for the PostServerLicense structure.
type PostServerLicenseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostServerLicenseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostServerLicenseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostServerLicenseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostServerLicenseOK creates a PostServerLicenseOK with default headers values
func NewPostServerLicenseOK() *PostServerLicenseOK {
	return &PostServerLicenseOK{}
}

/* PostServerLicenseOK describes a response with status code 200, with default header values.

License key was succesfully installed
*/
type PostServerLicenseOK struct {
	Payload *models.StatusResponse
}

func (o *PostServerLicenseOK) Error() string {
	return fmt.Sprintf("[POST /server/license][%d] postServerLicenseOK  %+v", 200, o.Payload)
}
func (o *PostServerLicenseOK) GetPayload() *models.StatusResponse {
	return o.Payload
}

func (o *PostServerLicenseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostServerLicenseBadRequest creates a PostServerLicenseBadRequest with default headers values
func NewPostServerLicenseBadRequest() *PostServerLicenseBadRequest {
	return &PostServerLicenseBadRequest{}
}

/* PostServerLicenseBadRequest describes a response with status code 400, with default header values.

Invalid request data
*/
type PostServerLicenseBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PostServerLicenseBadRequest) Error() string {
	return fmt.Sprintf("[POST /server/license][%d] postServerLicenseBadRequest  %+v", 400, o.Payload)
}
func (o *PostServerLicenseBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostServerLicenseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
