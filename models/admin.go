// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Admin Plesk administrator information
//
// swagger:model Admin
type Admin struct {

	// The administrator's street address.
	// Example: Vordergasse 59
	Address string `json:"address,omitempty"`

	// The name of the city where administrator lives.
	// Example: Schaffhausen
	City string `json:"city,omitempty"`

	// The administrator's company name.
	// Example: Plesk
	Company string `json:"company,omitempty"`

	// The name of the country where administrator lives.
	// Example: CH
	Country string `json:"country,omitempty"`

	// The administrator's e-mail address.
	// Example: john_smith@plesk.com
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// The administrator's fax number.
	// Example: +41 31 528 12 23
	Fax string `json:"fax,omitempty"`

	// The locale used by the administrator.
	// Example: en-US
	Locale string `json:"locale,omitempty"`

	// It specifies the information if the administrator has multiple sessions in Plesk.
	// Example: false
	MultipleSessions bool `json:"multiple_sessions,omitempty"`

	// The administrator's personal name.
	// Example: John Smith
	// Required: true
	Name *string `json:"name"`

	// The administrator's phone number.
	// Example: +41 31 528 12 23
	Phone string `json:"phone,omitempty"`

	// The administrator's zip/postal code.
	// Example: 8200
	PostCode string `json:"post_code,omitempty"`

	// It specifies whether Plesk announcement messages are sent to the administrator's e-mail.
	// Example: false
	SendAnnounce bool `json:"send_announce,omitempty"`

	// The name of state (for US citizens) or province where administrator lives.
	// Example: Kanton Schaffhausen
	State string `json:"state,omitempty"`
}

// Validate validates this admin
func (m *Admin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Admin) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Admin) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this admin based on context it is used
func (m *Admin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Admin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Admin) UnmarshalBinary(b []byte) error {
	var res Admin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
