// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientRequest The client entity
//
// swagger:model ClientRequest
type ClientRequest struct {

	// The company name (0 to 60 characters long).
	// Example: Plesk
	Company string `json:"company,omitempty"`

	// The description for the client account.
	// Example: Nice guy
	Description string `json:"description,omitempty"`

	// The email address of the client account owner (0 to 255 characters long).
	// Example: john_smith@msn.com
	// Required: true
	Email *string `json:"email"`

	// The client GUID in the Plesk components (for example, Business Manager).
	// Example: link:12345
	ExternalID string `json:"external_id,omitempty"`

	// The locale used on the client account. Default value: en-US.
	// Example: en-US
	Locale string `json:"locale,omitempty"`

	// The login name of the client account (1 to 60 characters long).
	// Example: john-unit-test
	// Required: true
	Login *string `json:"login"`

	// Client's personal name (1 to 60 characters long).
	// Example: John Smith
	// Required: true
	Name *string `json:"name"`

	// The login name of a client account owner. If the client account owner is Plesk Administrator, specify the admin login name.
	// Example: admin
	OwnerLogin string `json:"owner_login,omitempty"`

	// The password of the client account (5 to 14 characters long).
	// Example: changeme1Q**
	// Required: true
	Password *string `json:"password"`

	// The current status of the client account. Allowed values: 0 (active) | 16 (disabled by admin) | 4 (under backup/restore) | 256 (expired).
	// Example: 0
	Status int64 `json:"status,omitempty"`

	// The type of the client account. Allowed values: reseller | customer | admin.
	// Example: reseller
	// Required: true
	// Enum: [reseller customer admin]
	Type *string `json:"type"`
}

// Validate validates this client request
func (m *ClientRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientRequest) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *ClientRequest) validateLogin(formats strfmt.Registry) error {

	if err := validate.Required("login", "body", m.Login); err != nil {
		return err
	}

	return nil
}

func (m *ClientRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ClientRequest) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

var clientRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["reseller","customer","admin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientRequestTypeTypePropEnum = append(clientRequestTypeTypePropEnum, v)
	}
}

const (

	// ClientRequestTypeReseller captures enum value "reseller"
	ClientRequestTypeReseller string = "reseller"

	// ClientRequestTypeCustomer captures enum value "customer"
	ClientRequestTypeCustomer string = "customer"

	// ClientRequestTypeAdmin captures enum value "admin"
	ClientRequestTypeAdmin string = "admin"
)

// prop value enum
func (m *ClientRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClientRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this client request based on context it is used
func (m *ClientRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClientRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientRequest) UnmarshalBinary(b []byte) error {
	var res ClientRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
