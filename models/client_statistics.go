// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientStatistics The client statistics
//
// swagger:model ClientStatistics
type ClientStatistics struct {

	// The number of active domains created by a client.
	// Example: 1
	// Required: true
	ActiveDomains *int64 `json:"active_domains"`

	// The number of databases used by a client.
	// Example: 0
	// Required: true
	Databases *int64 `json:"databases"`

	// The amount of disk space occupied by the given a client.
	// Example: 765952
	// Required: true
	DiskSpace *int64 `json:"disk_space"`

	// The number of email boxes created by a client.
	// Example: 1
	// Required: true
	EmailPostboxes *int64 `json:"email_postboxes"`

	// The number of redirects created by a client.
	// Example: 0
	// Required: true
	EmailRedirects *int64 `json:"email_redirects"`

	// The number of automatic response messages created by a client.
	// Example: 0
	// Required: true
	EmailResponseMessages *int64 `json:"email_response_messages"`

	// The number of mailing lists created by a client.
	// Example: 0
	// Required: true
	MailingLists *int64 `json:"mailing_lists"`

	// The number of sub-domains created by a client.
	// Example: 0
	// Required: true
	Subdomains *int64 `json:"subdomains"`

	// The amount of traffic (in bytes) spent by a client monthly.
	// Example: 0
	// Required: true
	Traffic *int64 `json:"traffic"`

	// The amount of traffic (in bytes) spent by a client during the previous day.
	// Example: 0
	// Required: true
	TrafficPrevday *int64 `json:"traffic_prevday"`
}

// Validate validates this client statistics
func (m *ClientStatistics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskSpace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailPostboxes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailRedirects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailResponseMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMailingLists(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubdomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraffic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficPrevday(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientStatistics) validateActiveDomains(formats strfmt.Registry) error {

	if err := validate.Required("active_domains", "body", m.ActiveDomains); err != nil {
		return err
	}

	return nil
}

func (m *ClientStatistics) validateDatabases(formats strfmt.Registry) error {

	if err := validate.Required("databases", "body", m.Databases); err != nil {
		return err
	}

	return nil
}

func (m *ClientStatistics) validateDiskSpace(formats strfmt.Registry) error {

	if err := validate.Required("disk_space", "body", m.DiskSpace); err != nil {
		return err
	}

	return nil
}

func (m *ClientStatistics) validateEmailPostboxes(formats strfmt.Registry) error {

	if err := validate.Required("email_postboxes", "body", m.EmailPostboxes); err != nil {
		return err
	}

	return nil
}

func (m *ClientStatistics) validateEmailRedirects(formats strfmt.Registry) error {

	if err := validate.Required("email_redirects", "body", m.EmailRedirects); err != nil {
		return err
	}

	return nil
}

func (m *ClientStatistics) validateEmailResponseMessages(formats strfmt.Registry) error {

	if err := validate.Required("email_response_messages", "body", m.EmailResponseMessages); err != nil {
		return err
	}

	return nil
}

func (m *ClientStatistics) validateMailingLists(formats strfmt.Registry) error {

	if err := validate.Required("mailing_lists", "body", m.MailingLists); err != nil {
		return err
	}

	return nil
}

func (m *ClientStatistics) validateSubdomains(formats strfmt.Registry) error {

	if err := validate.Required("subdomains", "body", m.Subdomains); err != nil {
		return err
	}

	return nil
}

func (m *ClientStatistics) validateTraffic(formats strfmt.Registry) error {

	if err := validate.Required("traffic", "body", m.Traffic); err != nil {
		return err
	}

	return nil
}

func (m *ClientStatistics) validateTrafficPrevday(formats strfmt.Registry) error {

	if err := validate.Required("traffic_prevday", "body", m.TrafficPrevday); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this client statistics based on context it is used
func (m *ClientStatistics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClientStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientStatistics) UnmarshalBinary(b []byte) error {
	var res ClientStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
