// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Database database
//
// swagger:model Database
type Database struct {

	// ID of the default database user for database
	// Example: 6
	DefaultUserID int64 `json:"default_user_id,omitempty"`

	// ID of the database
	// Example: 2
	ID int64 `json:"id,omitempty"`

	// Database name
	// Example: exampledb
	Name string `json:"name,omitempty"`

	// ID of the parent domain
	// Example: 3
	ParentDomain int64 `json:"parent_domain,omitempty"`

	// ID of the database server
	// Example: 1
	ServerID int64 `json:"server_id,omitempty"`

	// Database server type
	// Enum: [mssql mysql postgresql]
	Type string `json:"type,omitempty"`
}

// Validate validates this database
func (m *Database) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var databaseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mssql","mysql","postgresql"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databaseTypeTypePropEnum = append(databaseTypeTypePropEnum, v)
	}
}

const (

	// DatabaseTypeMssql captures enum value "mssql"
	DatabaseTypeMssql string = "mssql"

	// DatabaseTypeMysql captures enum value "mysql"
	DatabaseTypeMysql string = "mysql"

	// DatabaseTypePostgresql captures enum value "postgresql"
	DatabaseTypePostgresql string = "postgresql"
)

// prop value enum
func (m *Database) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, databaseTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Database) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this database based on context it is used
func (m *Database) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Database) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Database) UnmarshalBinary(b []byte) error {
	var res Database
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
