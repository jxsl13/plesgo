// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseRequest database request
//
// swagger:model DatabaseRequest
type DatabaseRequest struct {

	// Database name
	// Example: exampledb
	Name string `json:"name,omitempty"`

	// parent domain
	ParentDomain *DomainReference `json:"parent_domain,omitempty"`

	// ID of the database server
	// Example: 1
	ServerID int64 `json:"server_id,omitempty"`

	// Database server type
	// Enum: [mssql mysql postgresql]
	Type string `json:"type,omitempty"`
}

// Validate validates this database request
func (m *DatabaseRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParentDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseRequest) validateParentDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentDomain) { // not required
		return nil
	}

	if m.ParentDomain != nil {
		if err := m.ParentDomain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent_domain")
			}
			return err
		}
	}

	return nil
}

var databaseRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mssql","mysql","postgresql"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databaseRequestTypeTypePropEnum = append(databaseRequestTypeTypePropEnum, v)
	}
}

const (

	// DatabaseRequestTypeMssql captures enum value "mssql"
	DatabaseRequestTypeMssql string = "mssql"

	// DatabaseRequestTypeMysql captures enum value "mysql"
	DatabaseRequestTypeMysql string = "mysql"

	// DatabaseRequestTypePostgresql captures enum value "postgresql"
	DatabaseRequestTypePostgresql string = "postgresql"
)

// prop value enum
func (m *DatabaseRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, databaseRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DatabaseRequest) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this database request based on the context it is used
func (m *DatabaseRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParentDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseRequest) contextValidateParentDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentDomain != nil {
		if err := m.ParentDomain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent_domain")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseRequest) UnmarshalBinary(b []byte) error {
	var res DatabaseRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
