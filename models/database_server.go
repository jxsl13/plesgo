// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseServer database server
//
// swagger:model DatabaseServer
type DatabaseServer struct {

	// Database server database count
	// Example: 123
	DbCount int64 `json:"db_count,omitempty"`

	// Database server host
	// Example: 127.0.0.1
	Host string `json:"host,omitempty"`

	// ID of the database server
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Flag that server is default for servers of this type
	IsDefault bool `json:"is_default,omitempty"`

	// Flag that server is installed on local service node
	IsLocal bool `json:"is_local,omitempty"`

	// Database server port
	// Example: 3306
	Port int64 `json:"port,omitempty"`

	// Database server status
	Status string `json:"status,omitempty"`

	// Database server type
	// Enum: [mssql mysql postgresql]
	Type string `json:"type,omitempty"`
}

// Validate validates this database server
func (m *DatabaseServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var databaseServerTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mssql","mysql","postgresql"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databaseServerTypeTypePropEnum = append(databaseServerTypeTypePropEnum, v)
	}
}

const (

	// DatabaseServerTypeMssql captures enum value "mssql"
	DatabaseServerTypeMssql string = "mssql"

	// DatabaseServerTypeMysql captures enum value "mysql"
	DatabaseServerTypeMysql string = "mysql"

	// DatabaseServerTypePostgresql captures enum value "postgresql"
	DatabaseServerTypePostgresql string = "postgresql"
)

// prop value enum
func (m *DatabaseServer) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, databaseServerTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DatabaseServer) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this database server based on context it is used
func (m *DatabaseServer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseServer) UnmarshalBinary(b []byte) error {
	var res DatabaseServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
