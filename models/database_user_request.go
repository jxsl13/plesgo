// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatabaseUserRequest database user request
//
// swagger:model DatabaseUserRequest
type DatabaseUserRequest struct {

	// ID of the database (if user should have access to one database)
	// Example: 3
	DatabaseID int64 `json:"database_id,omitempty"`

	// Database user login
	// Example: exampledbuser
	Login string `json:"login,omitempty"`

	// parent domain
	ParentDomain *DomainReference `json:"parent_domain,omitempty"`

	// User password
	// Example: changeme1Q**
	Password string `json:"password,omitempty"`

	// ID of the database server (if user should have access to all databases on subscription)
	// Example: 9
	ServerID int64 `json:"server_id,omitempty"`
}

// Validate validates this database user request
func (m *DatabaseUserRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParentDomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseUserRequest) validateParentDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentDomain) { // not required
		return nil
	}

	if m.ParentDomain != nil {
		if err := m.ParentDomain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent_domain")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this database user request based on the context it is used
func (m *DatabaseUserRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParentDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseUserRequest) contextValidateParentDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentDomain != nil {
		if err := m.ParentDomain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent_domain")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseUserRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseUserRequest) UnmarshalBinary(b []byte) error {
	var res DatabaseUserRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
