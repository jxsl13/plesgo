// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DNSRecord Dns record
//
// swagger:model DnsRecord
type DNSRecord struct {

	// The IP address or name of a host, that will be used by DNS
	Host string `json:"host,omitempty"`

	// Unique identifier of the DNS record
	ID int64 `json:"id,omitempty"`

	// Optional information about the DNS record
	Opt string `json:"opt,omitempty"`

	// The amount of time (in seconds) that slave DNS servers should store the record in a cache
	TTL int64 `json:"ttl,omitempty"`

	// The type of the DNS record
	// Enum: [A CNAME PTR MX NS TXT SOA AXFR SRV AAAA DS CAA]
	Type string `json:"type,omitempty"`

	// The value that will be linked with the host value
	Value string `json:"value,omitempty"`
}

// Validate validates this Dns record
func (m *DNSRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dnsRecordTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A","CNAME","PTR","MX","NS","TXT","SOA","AXFR","SRV","AAAA","DS","CAA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dnsRecordTypeTypePropEnum = append(dnsRecordTypeTypePropEnum, v)
	}
}

const (

	// DNSRecordTypeA captures enum value "A"
	DNSRecordTypeA string = "A"

	// DNSRecordTypeCNAME captures enum value "CNAME"
	DNSRecordTypeCNAME string = "CNAME"

	// DNSRecordTypePTR captures enum value "PTR"
	DNSRecordTypePTR string = "PTR"

	// DNSRecordTypeMX captures enum value "MX"
	DNSRecordTypeMX string = "MX"

	// DNSRecordTypeNS captures enum value "NS"
	DNSRecordTypeNS string = "NS"

	// DNSRecordTypeTXT captures enum value "TXT"
	DNSRecordTypeTXT string = "TXT"

	// DNSRecordTypeSOA captures enum value "SOA"
	DNSRecordTypeSOA string = "SOA"

	// DNSRecordTypeAXFR captures enum value "AXFR"
	DNSRecordTypeAXFR string = "AXFR"

	// DNSRecordTypeSRV captures enum value "SRV"
	DNSRecordTypeSRV string = "SRV"

	// DNSRecordTypeAAAA captures enum value "AAAA"
	DNSRecordTypeAAAA string = "AAAA"

	// DNSRecordTypeDS captures enum value "DS"
	DNSRecordTypeDS string = "DS"

	// DNSRecordTypeCAA captures enum value "CAA"
	DNSRecordTypeCAA string = "CAA"
)

// prop value enum
func (m *DNSRecord) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dnsRecordTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DNSRecord) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Dns record based on context it is used
func (m *DNSRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DNSRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DNSRecord) UnmarshalBinary(b []byte) error {
	var res DNSRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
