// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainRequest domain request
//
// swagger:model DomainRequest
type DomainRequest struct {

	// It specifies the base domain when creating the addon domain.
	BaseDomain *DomainReference `json:"base_domain,omitempty"`

	// The description for the domain.
	// Example: My website
	Description string `json:"description,omitempty"`

	// hosting settings
	HostingSettings *DomainRequestHostingSettings `json:"hosting_settings,omitempty"`

	// It specifies the hosting type of the created domain. Allowed values: `virtual` | `standard_forwarding` | `frame_forwarding` | `none`.
	// Meanings: `virtual` - the domain ships with physical hosting.
	// `standard_forwarding` - the domain ships with standard forwarding.  When the user goes to a domain on which the standard forwarding is set, Plesk redirects this user from the requested URL to the destination URL. This is done explicitly: the user sees the real ‘destination’ address in the path bar of the browser.
	// `frame_forwarding` - the domain ships with frame forwarding. When the user goes to such site on which frame forwarding is set, Plesk redirects this user from the requested URL to the ‘destination’ URL implicitly (the user still sees the initial URL in the path bar of the browser).
	// `none` - no hosting ships with the domain.
	// Enum: [virtual standard_forwarding frame_forwarding none]
	HostingType string `json:"hosting_type,omitempty"`

	// The IP address associated with the domain.
	// Example: ["93.184.216.34","2606:2800:220:1:248:1893:25c8:1946"]
	IPAddresses []string `json:"ip_addresses"`

	// @deprecated
	// Example: ["93.184.216.34"]
	IPV4 []strfmt.IPv4 `json:"ipv4"`

	// @deprecated
	// Example: ["2606:2800:220:1:248:1893:25c8:1946"]
	IPV6 []strfmt.IPv6 `json:"ipv6"`

	// Domain name.
	// Example: example.com
	Name string `json:"name,omitempty"`

	// It specifies the ID, login, GUID or external ID of the new subscription owner Administrator, reseller, or customer.
	OwnerClient *OwnerClientReference `json:"owner_client,omitempty"`

	// It specifies the parent domain when creating the subdomain.
	ParentDomain *DomainReference `json:"parent_domain,omitempty"`

	// plan
	Plan *PlanReference `json:"plan,omitempty"`
}

// Validate validates this domain request
func (m *DomainRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostingSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainRequest) validateBaseDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseDomain) { // not required
		return nil
	}

	if m.BaseDomain != nil {
		if err := m.BaseDomain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base_domain")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRequest) validateHostingSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.HostingSettings) { // not required
		return nil
	}

	if m.HostingSettings != nil {
		if err := m.HostingSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosting_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosting_settings")
			}
			return err
		}
	}

	return nil
}

var domainRequestTypeHostingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["virtual","standard_forwarding","frame_forwarding","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainRequestTypeHostingTypePropEnum = append(domainRequestTypeHostingTypePropEnum, v)
	}
}

const (

	// DomainRequestHostingTypeVirtual captures enum value "virtual"
	DomainRequestHostingTypeVirtual string = "virtual"

	// DomainRequestHostingTypeStandardForwarding captures enum value "standard_forwarding"
	DomainRequestHostingTypeStandardForwarding string = "standard_forwarding"

	// DomainRequestHostingTypeFrameForwarding captures enum value "frame_forwarding"
	DomainRequestHostingTypeFrameForwarding string = "frame_forwarding"

	// DomainRequestHostingTypeNone captures enum value "none"
	DomainRequestHostingTypeNone string = "none"
)

// prop value enum
func (m *DomainRequest) validateHostingTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domainRequestTypeHostingTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomainRequest) validateHostingType(formats strfmt.Registry) error {
	if swag.IsZero(m.HostingType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHostingTypeEnum("hosting_type", "body", m.HostingType); err != nil {
		return err
	}

	return nil
}

func (m *DomainRequest) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV4) { // not required
		return nil
	}

	for i := 0; i < len(m.IPV4); i++ {

		if err := validate.FormatOf("ipv4"+"."+strconv.Itoa(i), "body", "ipv4", m.IPV4[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *DomainRequest) validateIPV6(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6) { // not required
		return nil
	}

	for i := 0; i < len(m.IPV6); i++ {

		if err := validate.FormatOf("ipv6"+"."+strconv.Itoa(i), "body", "ipv6", m.IPV6[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *DomainRequest) validateOwnerClient(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerClient) { // not required
		return nil
	}

	if m.OwnerClient != nil {
		if err := m.OwnerClient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner_client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner_client")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRequest) validateParentDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentDomain) { // not required
		return nil
	}

	if m.ParentDomain != nil {
		if err := m.ParentDomain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent_domain")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRequest) validatePlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain request based on the context it is used
func (m *DomainRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostingSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerClient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainRequest) contextValidateBaseDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseDomain != nil {
		if err := m.BaseDomain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base_domain")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRequest) contextValidateHostingSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.HostingSettings != nil {
		if err := m.HostingSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosting_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosting_settings")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRequest) contextValidateOwnerClient(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerClient != nil {
		if err := m.OwnerClient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner_client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner_client")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRequest) contextValidateParentDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentDomain != nil {
		if err := m.ParentDomain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent_domain")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRequest) contextValidatePlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Plan != nil {
		if err := m.Plan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainRequest) UnmarshalBinary(b []byte) error {
	var res DomainRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DomainRequestHostingSettings  for *physical hosting*:
// `ftp_login` - it specifies the ftp user login name (required). `ftp_password` - it specifies the ftp user password (required).
// for *frame forwarding* and *standard forwarding*:
// `dest_url` - it specifies the URL to which the user will be redirected explicitly at the attempt to visit the specified domain.
// Example: {"ftp_login":"test_login","ftp_password":"changeme1Q**"}
//
// swagger:model DomainRequestHostingSettings
type DomainRequestHostingSettings struct {

	// ftp login
	// Example: login
	FtpLogin string `json:"ftp_login,omitempty"`

	// ftp password
	// Example: qwe123
	FtpPassword string `json:"ftp_password,omitempty"`

	// domain request hosting settings additional properties
	DomainRequestHostingSettingsAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *DomainRequestHostingSettings) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// ftp login
		// Example: login
		FtpLogin string `json:"ftp_login,omitempty"`

		// ftp password
		// Example: qwe123
		FtpPassword string `json:"ftp_password,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv DomainRequestHostingSettings

	rcv.FtpLogin = stage1.FtpLogin
	rcv.FtpPassword = stage1.FtpPassword
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "ftp_login")
	delete(stage2, "ftp_password")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.DomainRequestHostingSettingsAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m DomainRequestHostingSettings) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// ftp login
		// Example: login
		FtpLogin string `json:"ftp_login,omitempty"`

		// ftp password
		// Example: qwe123
		FtpPassword string `json:"ftp_password,omitempty"`
	}

	stage1.FtpLogin = m.FtpLogin
	stage1.FtpPassword = m.FtpPassword

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.DomainRequestHostingSettingsAdditionalProperties) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.DomainRequestHostingSettingsAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this domain request hosting settings
func (m *DomainRequestHostingSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this domain request hosting settings based on context it is used
func (m *DomainRequestHostingSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainRequestHostingSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainRequestHostingSettings) UnmarshalBinary(b []byte) error {
	var res DomainRequestHostingSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
