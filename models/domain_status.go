// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainStatus domain status
//
// swagger:model DomainStatus
type DomainStatus struct {

	// Status of the specified domain.
	// Example: active
	// Required: true
	// Enum: [active suspended disabled]
	Status *string `json:"status"`
}

// Validate validates this domain status
func (m *DomainStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var domainStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","suspended","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainStatusTypeStatusPropEnum = append(domainStatusTypeStatusPropEnum, v)
	}
}

const (

	// DomainStatusStatusActive captures enum value "active"
	DomainStatusStatusActive string = "active"

	// DomainStatusStatusSuspended captures enum value "suspended"
	DomainStatusStatusSuspended string = "suspended"

	// DomainStatusStatusDisabled captures enum value "disabled"
	DomainStatusStatusDisabled string = "disabled"
)

// prop value enum
func (m *DomainStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domainStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomainStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain status based on context it is used
func (m *DomainStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainStatus) UnmarshalBinary(b []byte) error {
	var res DomainStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
