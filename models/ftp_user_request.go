// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FtpUserRequest ftp user request
//
// swagger:model FtpUserRequest
type FtpUserRequest struct {

	// Subdirectory of the WWW Root that user is restricted to
	// Example: /httpdocs
	Home string `json:"home,omitempty"`

	// User name in the system
	// Example: exampleuser
	// Required: true
	Name *string `json:"name"`

	// parent domain
	// Required: true
	ParentDomain *DomainReference `json:"parent_domain"`

	// User password
	// Example: changeme1Q**
	// Required: true
	Password *string `json:"password"`

	// permissions
	Permissions *FtpUserRequestPermissions `json:"permissions,omitempty"`

	// Hard disk quota in bytes (if supported by platform)
	// Example: -1
	Quota int64 `json:"quota,omitempty"`
}

// Validate validates this ftp user request
func (m *FtpUserRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FtpUserRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FtpUserRequest) validateParentDomain(formats strfmt.Registry) error {

	if err := validate.Required("parent_domain", "body", m.ParentDomain); err != nil {
		return err
	}

	if m.ParentDomain != nil {
		if err := m.ParentDomain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent_domain")
			}
			return err
		}
	}

	return nil
}

func (m *FtpUserRequest) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *FtpUserRequest) validatePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ftp user request based on the context it is used
func (m *FtpUserRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParentDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FtpUserRequest) contextValidateParentDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentDomain != nil {
		if err := m.ParentDomain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent_domain")
			}
			return err
		}
	}

	return nil
}

func (m *FtpUserRequest) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	if m.Permissions != nil {
		if err := m.Permissions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FtpUserRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FtpUserRequest) UnmarshalBinary(b []byte) error {
	var res FtpUserRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FtpUserRequestPermissions Access permissions of the user (if supported by platform)
//
// swagger:model FtpUserRequestPermissions
type FtpUserRequestPermissions struct {

	// read
	// Enum: [true false]
	Read string `json:"read,omitempty"`

	// write
	// Enum: [true false]
	Write string `json:"write,omitempty"`
}

// Validate validates this ftp user request permissions
func (m *FtpUserRequestPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWrite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ftpUserRequestPermissionsTypeReadPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["true","false"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ftpUserRequestPermissionsTypeReadPropEnum = append(ftpUserRequestPermissionsTypeReadPropEnum, v)
	}
}

const (

	// FtpUserRequestPermissionsReadTrue captures enum value "true"
	FtpUserRequestPermissionsReadTrue string = "true"

	// FtpUserRequestPermissionsReadFalse captures enum value "false"
	FtpUserRequestPermissionsReadFalse string = "false"
)

// prop value enum
func (m *FtpUserRequestPermissions) validateReadEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ftpUserRequestPermissionsTypeReadPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FtpUserRequestPermissions) validateRead(formats strfmt.Registry) error {
	if swag.IsZero(m.Read) { // not required
		return nil
	}

	// value enum
	if err := m.validateReadEnum("permissions"+"."+"read", "body", m.Read); err != nil {
		return err
	}

	return nil
}

var ftpUserRequestPermissionsTypeWritePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["true","false"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ftpUserRequestPermissionsTypeWritePropEnum = append(ftpUserRequestPermissionsTypeWritePropEnum, v)
	}
}

const (

	// FtpUserRequestPermissionsWriteTrue captures enum value "true"
	FtpUserRequestPermissionsWriteTrue string = "true"

	// FtpUserRequestPermissionsWriteFalse captures enum value "false"
	FtpUserRequestPermissionsWriteFalse string = "false"
)

// prop value enum
func (m *FtpUserRequestPermissions) validateWriteEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ftpUserRequestPermissionsTypeWritePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FtpUserRequestPermissions) validateWrite(formats strfmt.Registry) error {
	if swag.IsZero(m.Write) { // not required
		return nil
	}

	// value enum
	if err := m.validateWriteEnum("permissions"+"."+"write", "body", m.Write); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ftp user request permissions based on context it is used
func (m *FtpUserRequestPermissions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FtpUserRequestPermissions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FtpUserRequestPermissions) UnmarshalBinary(b []byte) error {
	var res FtpUserRequestPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
