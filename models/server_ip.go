// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerIP Server IP Addresses
//
// swagger:model ServerIp
type ServerIP struct {

	// The server network interface name.
	// Example: eth0
	// Required: true
	Interface *string `json:"interface"`

	// The IP address in Plesk database (IPv4).
	// Example: 93.184.216.34
	// Format: ipv4
	IPV4 strfmt.IPv4 `json:"ipv4,omitempty"`

	// The IP address in Plesk database (IPv6).
	// Example: 2606:2800:220:1:248:1893:25c8:1946
	// Format: ipv6
	IPV6 strfmt.IPv6 `json:"ipv6,omitempty"`

	// The netmask of the network.
	// Example: 255.255.255.0
	// Required: true
	Netmask *string `json:"netmask"`

	// The type of IP address. Allowed values: shared | exclusive.
	// Example: exclusive
	// Required: true
	// Enum: [shared exclusive]
	Type *string `json:"type"`
}

// Validate validates this server Ip
func (m *ServerIP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetmask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerIP) validateInterface(formats strfmt.Registry) error {

	if err := validate.Required("interface", "body", m.Interface); err != nil {
		return err
	}

	return nil
}

func (m *ServerIP) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV4) { // not required
		return nil
	}

	if err := validate.FormatOf("ipv4", "body", "ipv4", m.IPV4.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServerIP) validateIPV6(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6) { // not required
		return nil
	}

	if err := validate.FormatOf("ipv6", "body", "ipv6", m.IPV6.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServerIP) validateNetmask(formats strfmt.Registry) error {

	if err := validate.Required("netmask", "body", m.Netmask); err != nil {
		return err
	}

	return nil
}

var serverIpTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["shared","exclusive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverIpTypeTypePropEnum = append(serverIpTypeTypePropEnum, v)
	}
}

const (

	// ServerIPTypeShared captures enum value "shared"
	ServerIPTypeShared string = "shared"

	// ServerIPTypeExclusive captures enum value "exclusive"
	ServerIPTypeExclusive string = "exclusive"
)

// prop value enum
func (m *ServerIP) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverIpTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerIP) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this server Ip based on context it is used
func (m *ServerIP) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerIP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerIP) UnmarshalBinary(b []byte) error {
	var res ServerIP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
