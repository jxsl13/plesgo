// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerMeta Server Meta Information
//
// swagger:model ServerMeta
type ServerMeta struct {

	// REST API release number.
	// Example: 10
	// Required: true
	ExtensionRelease *string `json:"extension_release"`

	// REST API extension version.
	// Example: 1.1.0
	// Required: true
	ExtensionVersion *string `json:"extension_version"`

	// Server GUID.
	// Example: baa58292-fee0-4ecb-9da1-bba0cc5adea7
	// Required: true
	GUID *string `json:"guid"`

	// Server hostname.
	// Example: example.com
	// Required: true
	Hostname *string `json:"hostname"`

	// Product ISO build date.
	// Example: 2018-06-20
	// Required: true
	// Format: date
	PanelBuildDate *strfmt.Date `json:"panel_build_date"`

	// Product build revision.
	// Example: 1711e2bceff6fd6656c821b8cb6444c2726f3784
	// Required: true
	PanelRevision *string `json:"panel_revision"`

	// Product installed update version.
	// Example: 10
	// Required: true
	PanelUpdateVersion *string `json:"panel_update_version"`

	// Product version.
	// Example: 17.9.3
	// Required: true
	PanelVersion *string `json:"panel_version"`

	// Server platform type.
	// Example: Unix
	// Required: true
	Platform *string `json:"platform"`
}

// Validate validates this server meta
func (m *ServerMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensionRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePanelBuildDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePanelRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePanelUpdateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePanelVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerMeta) validateExtensionRelease(formats strfmt.Registry) error {

	if err := validate.Required("extension_release", "body", m.ExtensionRelease); err != nil {
		return err
	}

	return nil
}

func (m *ServerMeta) validateExtensionVersion(formats strfmt.Registry) error {

	if err := validate.Required("extension_version", "body", m.ExtensionVersion); err != nil {
		return err
	}

	return nil
}

func (m *ServerMeta) validateGUID(formats strfmt.Registry) error {

	if err := validate.Required("guid", "body", m.GUID); err != nil {
		return err
	}

	return nil
}

func (m *ServerMeta) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *ServerMeta) validatePanelBuildDate(formats strfmt.Registry) error {

	if err := validate.Required("panel_build_date", "body", m.PanelBuildDate); err != nil {
		return err
	}

	if err := validate.FormatOf("panel_build_date", "body", "date", m.PanelBuildDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServerMeta) validatePanelRevision(formats strfmt.Registry) error {

	if err := validate.Required("panel_revision", "body", m.PanelRevision); err != nil {
		return err
	}

	return nil
}

func (m *ServerMeta) validatePanelUpdateVersion(formats strfmt.Registry) error {

	if err := validate.Required("panel_update_version", "body", m.PanelUpdateVersion); err != nil {
		return err
	}

	return nil
}

func (m *ServerMeta) validatePanelVersion(formats strfmt.Registry) error {

	if err := validate.Required("panel_version", "body", m.PanelVersion); err != nil {
		return err
	}

	return nil
}

func (m *ServerMeta) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this server meta based on context it is used
func (m *ServerMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerMeta) UnmarshalBinary(b []byte) error {
	var res ServerMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
